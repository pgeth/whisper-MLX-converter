import mlx_whisper
from pathlib import Path
import sys
import time

def transcribe_video(video_path):
  if not Path(video_path).exists():
    print(f" –û—à–∏–±–∫–∞: —Ñ–∞–π–ª '{video_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    return

  print(f"üé¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {video_path}")
  print("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è...")

  start_time = time.time()

  try:
    result = mlx_whisper.transcribe(
      video_path,
      path_or_hf_repo='mlx-community/whisper-large-v3-turbo'
    )

    end_time = time.time()
    duration = end_time - start_time

    video_name = Path(video_path).stem  # –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    script_dir = Path(__file__).parent.resolve()  # resolve() –¥–∞—ë—Ç –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
    output_file = script_dir / f"{video_name}_transcript.txt"

    with open(output_file, 'w', encoding='utf-8' ) as f:
      f.write(result['text'])

    print(f"‚úÖ –ì–æ—Ç–æ–≤–æ!")
    print(f"üìÑ –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {output_file}")
    print(f"‚è±Ô∏è –í—Ä–µ–º—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {duration:.1f} —Å–µ–∫")

  except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")

def main():
    if len(sys.argv) < 2:
        print("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print(f"   python {Path(__file__).name} <–ø—É—Ç—å_–∫_–≤–∏–¥–µ–æ>")
        print("\nüí° –ü—Ä–∏–º–µ—Ä—ã:")
        print(f"   python {Path(__file__).name} video.mp4")
        print(f"   python {Path(__file__).name} /Users/name/Videos/lecture.mov")
        sys.exit(1)
    
    video_path = sys.argv[1]
    transcribe_video(video_path)

if __name__ == "__main__":
    main()
